#!/usr/bin/env python
#

"""
gcp: graphterm-aware copy
"""

import json
import os
import shutil
import sys
import urllib

from optparse import OptionParser

Lterm_cookie = os.getenv("GRAPHTERM_COOKIE", "")
Host = os.getenv("GRAPHTERM_HOST", "")
Gterm_url = os.getenv("GRAPHTERM_URL", "http://localhost:8900")
Html_escapes = ["\x1b[?1155;%sh" % Lterm_cookie,
                "\x1b[?1155l"]

def wrap(html):
    return Html_escapes[0] + html + Html_escapes[1]

FILE_URI_PREFIX = "file://"
def split_file_uri(uri):
	"""Return triplet [hostname, filename, fullpath, query] for file://host/path URIs
	If not file URI, returns []
	"""
	if not uri.startswith(FILE_URI_PREFIX):
		return []
	host_path = uri[len(FILE_URI_PREFIX):]
	j = host_path.find("?")
	if j >= 0:
		query = host_path[j:]
		host_path = host_path[:j]
	else:
		query = ""
	comps = host_path.split("/")
	return [comps[0], comps[-1], "/"+"/".join(comps[1:]), query]

usage = "usage: %prog gcp <source_file_url> <dest_file_url>"
parser = OptionParser(usage=usage)
parser.add_option("-v", "--verbose",
                  action="store_true", dest="verbose", default=False,
                  help="Verbose")

(options, args) = parser.parse_args()
location = " ".join(args)

if len(args) != 2:
    print >> sys.stderr, "Usage: gcp <source_file_url> <dest_file_url>"
    sys.exit(1)

src_uri, dst_uri = args

src_comps = split_file_uri(src_uri)
dst_comps = split_file_uri(dst_uri)

dst_file = dst_comps[2] if dst_comps and dst_comps[0] == Host else dst_uri

src_file = None
if not src_comps or src_comps[0] == Host:
    src_file = src_comps[2] if src_comps else src_uri

def transfer_hook(blocks_received, block_size, total_size):
    pass

if os.path.exists(dst_file):
    if not os.path.isdir(dst_file) or not os.access(dst_file, os.W_OK):
        print >> sys.stderr, "Unable to write to %s" % dst_file
        sys.exit(1)
    dst_file = os.path.join(dst_file, src_comps[1] if src_comps else os.path.basename(src_file))

if src_file:
    if not os.path.isfile(src_file) or not os.access(src_file, os.R_OK):
        print >> sys.stderr, "Unable to read from %s" % src_file
        sys.exit(1)

    if options.verbose:
        print >> sys.stderr, "Copying %s -> %s" % (src_file, dst_file)
    shutil.copyfile(src_file, dst_file)

else:
    req_url = Gterm_url + "/file/" + src_comps[0] + src_comps[2] + src_comps[3] + "&" + urllib.urlencode({"host": Host, "cookie": Lterm_cookie})
    if options.verbose:
        print >> sys.stderr, "Copying %s -> %s" % (req_url, dst_file)
    fname, headers = urllib.urlretrieve(req_url, dst_file, transfer_hook)
