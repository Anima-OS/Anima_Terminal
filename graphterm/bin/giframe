#!/usr/bin/env python
#

"""
giframe: Display file (or HTML from stdin) in inline iframe
"""

import mimetypes
import os
import random
import sys
import termios
import time

from optparse import OptionParser

import gtermapi

usage = "usage: %prog [file|URL]"
parser = OptionParser(usage=usage)

parser.add_option("-p", "--prefix", dest="prefix", default="",
                  help="prefix text")

parser.add_option("", "--opacity", dest="opacity", default=1.0,
                  help="Feed opacity (default: 1.0)")

parser.add_option("-f", "--fullscreen",
                  action="store_true", dest="fullscreen", default=False,
                  help="Fullscreen display")

parser.add_option("-n", "--noheader", action="store_true", dest="noheader", default=False,
                  help="Suppress header")

parser.add_option("-e", "--echo", action="store_true", dest="echo", default=False,
                  help="Do not suppress terminal echo")

(options, args) = parser.parse_args()
if args:
    if args[0].startswith("http:") or args[0].startswith("https:"):
        iframe_url = args[0]
    else:
        if gtermapi.Export_host:
            iframe_url = gtermapi.create_blob(from_file=args[0])
        else:
            iframe_url = gtermapi.get_file_url(args[0], relative=True, exists=True)

        if not iframe_url:
            print >> sys.stderr, "File %s not found" % args[0]
            sys.exit(1)
else:
    try:
        content = sys.stdin.read()
    except (EOFError, KeyboardInterrupt):
        content = None

    if not content:
        print >> sys.stderr, "Error in reading from stdin"
        sys.exit(1)

    iframe_url = gtermapi.create_blob(content, content_type="text/html")

headers = {"opacity": options.opacity}
if not options.fullscreen:
    headers["autosize"] = True

frameId = "giframe%09d" % random.randrange(0, 10**9)
frameHeight = ' height="%d%%" ' % (100 if options.noheader else 95) if options.fullscreen else ''

add_class = "gterm-noheader" if options.noheader else ""
IFRAMEFORMAT = '<iframe id="%s" class="gterm-iframe %s" src="%s" width="100%%" %s></iframe>'
iframe_html = IFRAMEFORMAT % (frameId, add_class, iframe_url, frameHeight)
if not options.noheader:
    iframe_html = '<span class="gterm-iframeclose gterm-iframeheader">&#215;</span>' + iframe_html

gtermapi.write_scroll_pagelet(iframe_html, display=("fullscreen" if options.fullscreen else "block"), add_headers=headers)

if options.fullscreen:
    if options.echo or not sys.stdout.isatty():
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            gtermapi.write_scroll_blank()
    else:
        saved_settings = termios.tcgetattr(sys.stdout.fileno())
        new_settings = saved_settings[:]
        new_settings[3] = new_settings[3] & ~termios.ECHO   # Disable terminal echo
        try:
            termios.tcsetattr(sys.stdout.fileno(), termios.TCSADRAIN, new_settings)
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            gtermapi.write_scroll_blank()
        finally:
            termios.tcsetattr(sys.stdout.fileno(), termios.TCSADRAIN, saved_settings)

