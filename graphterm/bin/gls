#!/usr/bin/env python
#

"""
gls: graphterm-aware ls
"""

import hashlib
import hmac
import json
import mimetypes
import os
import sys
import xml.dom.minidom
from optparse import OptionParser

Lterm_cookie = os.getenv("GRAPHTERM_COOKIE", "")
Host = os.getenv("GRAPHTERM_HOST", "")
Html_escapes = ["\x1b[?1155;%sh" % Lterm_cookie,
                "\x1b[?1155l"]

SPECIAL_FILES = set(["..", ".", "~"])

glscmd = os.getenv("GRAPHTERM_LS_CMD", "") or "gls"
gvicmd = os.getenv("GRAPHTERM_VI_CMD", "") or "gvi"
gopencmd = os.getenv("GRAPHTERM_OPEN_CMD", "") or "gopen"

FILE_TYPES = {"directory": ("/static/images/tango-folder.png", "cd %(path); "+glscmd+" -f"),
              "executable": ("/static/images/tango-application-x-executable.png", ""),
              "audiofile": ("/static/images/tango-audio-x-generic.png", gopencmd),
              "htmlfile": ("/static/images/tango-text-html.png", gvicmd),
              "imagefile": ("/static/images/tango-image-x-generic.png", gopencmd),
              "plainfile": ("/static/images/tango-text-x-generic-template.png", gopencmd),
              "textfile": ("/static/images/tango-text-x-generic.png", gvicmd),
              "videofile": ("/static/images/tango-video-x-generic.png", gopencmd),
}

IMGFORMAT = '<td><a class="gterm-link gterm-imglink %(classes)s" href="%(fileurl)s" data-gtermmime="x-graphterm/%(filetype)s" data-gtermcmd="%(filecmd)s"><img class="gterm-img" src="%(fileicon)s"></img></a>'

TXTFORMAT = '<td><a class="gterm-link %(classes)s" href="%(fileurl)s" data-gtermmime="x-graphterm/%(filetype)s" data-gtermcmd="%(filecmd)s">%(filename)s</a>'

HEX_DIGITS = 16

def file2html(filepath, filename, filemode=0):
    mimetype = None
    if filename in SPECIAL_FILES:
        filetype = "directory"
    elif os.path.lexists(filepath):
        mimetype, encoding = mimetypes.guess_type(filename)
        filetype = "plainfile"
        if os.path.isdir(filepath):
            filetype = "directory"
        elif os.access(filepath, os.X_OK):
            filetype = "executable"
        elif mimetype:
            if mimetype.startswith("audio/"):
                filetype = "audiofile"
            elif mimetype == "text/html":
                filetype = "htmlfile"
            elif mimetype.startswith("image/"):
                filetype = "imagefile"
            elif mimetype.startswith("text/") or mimetype == "application/javascript":
                filetype = "textfile"
            elif mimetype.startswith("video/"):
                filetype = "videofile"
    else:
        return "", ""

    classes = "droppable" if filetype in ("directory", "executable") else ""
    fileicon, filecmd = FILE_TYPES[filetype]

    filehmac = "?hmac="+hmac.new(str(Lterm_cookie), filepath, digestmod=hashlib.sha256).hexdigest()[:HEX_DIGITS]
    fileurl = "/file/" + Host + filepath + filehmac
    if options.images and mimetype and mimetype.startswith("image/"):
        fileicon = fileurl

    params = {"classes": classes, "fileurl": fileurl, "filename": filename, "filetype": filetype,
              "fileicon": fileicon, "filecmd": filecmd}
    
    return IMGFORMAT % params, TXTFORMAT % params

def files2html(file_list, ncols=4):
    rows = []
    rowimg = []
    rowtxt = []

    for j, fileinfo in enumerate(file_list):
        if len(fileinfo) == 2:
            fpath, fname, fsize, ftime, fmode, fuid, fgid = fileinfo[0], fileinfo[1], 0, 0, 0, 0, 0
        else:
            fpath, fname, fsize, ftime, fmode, fuid, fgid = fileinfo
        cellimg, celltxt = file2html(fpath, fname, fmode)
        rowimg.append(cellimg)
        rowtxt.append(celltxt)
        if rowtxt and (not ((j+1) % ncols) or (j+1 == len(file_list))):
            rows.append( '<tr class="gterm-rowimg">' + "".join(rowimg) )
            rows.append( '<tr class="gterm-rowtxt">' + "".join(rowtxt) )
            rowimg = []
            rowtxt = []

    return "\n".join(rows)

def get_file_info(filename):
    filename = os.path.expanduser(filename)
    filepath = os.path.normcase(os.path.abspath(filename))
    if filename.startswith(".."):
        filename = filepath
    if os.path.exists(filepath):
        fstat = os.stat(filepath)
    elif os.path.lexists(filepath):
        fstat = os.lstat(filepath)
    else:
        return (filepath, filename, 0, 0, 0, 0, 0)
    return (filepath, filename, fstat.st_size, fstat.st_mtime, fstat.st_mode, fstat.st_uid, fstat.st_gid)

def wrap(html):
    return Html_escapes[0] + html + Html_escapes[1]


usage = "usage: %prog [-f] <location>"
parser = OptionParser(usage=usage)
parser.add_option("-f", "--fullpage",
                  action="store_true", dest="fullpage", default=False,
                  help="Fullpage display")
parser.add_option("-a", "--all",
                  action="store_true", dest="all", default=False,
                  help="Display all files, including hidden")
parser.add_option("-i", "--images",
                  action="store_true", dest="images", default=False,
                  help="Display image files as thumbnails")
parser.add_option("-s", "--size",
                  action="store_true", dest="size", default=False,
                  help="Sort by file size")
parser.add_option("-t", "--time",
                  action="store_true", dest="time", default=False,
                  help="Sort by time modified")

(options, args) = parser.parse_args()

home_dir = os.path.expanduser("~")
work_dir = os.getcwd()
parent_dir, dir_name = os.path.split(work_dir)

special_dirs = [(parent_dir, ".."),
                (work_dir, "."),
                (home_dir, "~")]

if not args:
    args = os.listdir(work_dir)
    if not options.all:
        args = [x for x in args if not x.startswith(".")]

File_list = [get_file_info(filename) for filename in args]

if options.size:
    File_list.sort(key=lambda x:x[2])
elif options.time:
    File_list.sort(key=lambda x:x[3])
else:
    File_list.sort(key=lambda x:x[1])

ncols = 4

Table_list = ['<table frame=none border=0>',
              '<colgroup colspan=%d width=1*>' % (ncols,),
              ]

Table_list.append(files2html(special_dirs, ncols))
Table_list.append(files2html(File_list, ncols))

Table_list.append('</table>')

html = "\n".join(Table_list) + "\n"

params = {"scroll": "top", "current_directory": work_dir}
params["display"] = "fullpage" if options.fullpage else "block"

headers = {"content_type": "text/html"}
headers["x_gterm_response"] = "pagelet"
headers["x_gterm_parameters"] = params

sys.stdout.write(wrap(json.dumps(headers)+"\n\n"+html))

